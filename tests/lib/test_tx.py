import bitcointx.core.psbt as psbt
import electrumx.lib.tx as tx_lib

tests = [
    "020000000192809f0b234cb850d71d020e678e93f074648ed0df5affd0c46d3bcb177f"
    "9ccf020000008b483045022100c5403bcf86c3ae7b8fd4ca0d1e4df6729cc1af05ff95"
    "d9726b43a64b41dd5d9902207fab615f41871885aa3062fc7d8f8d9d3dcbc2e4867c5d"
    "96dd7a176b99e927924141040baa4271a82c5f1a09a5ea63d763697ca0545b6049c4dd"
    "8e8d099dd91f2da10eb11e829000a82047ac56969fb582433067a21c3171e569d1832c"
    "34fdd793cfc8ffffffff030000000000000000226a20195ce612d20e5284eb78bb28c9"
    "c50d6139b10b77b2d5b2f94711b13162700472bfc53000000000001976a9144a519c63"
    "f985ba5ab8b71bb42f1ecb82a0a0d80788acf6984315000000001976a9148b80536aa3"
    "c460258cda834b86a46787c9a2b0bf88ac00000000",
    "0200000003ee933f16c93d433bfd45426e94ddb4c0406aecac66f1c23a9e55151430c2"
    "b4c4a70000006b483045022100c940624ddbefcf86f3a3d820347de9c695204583a3ce"
    "9977c45cb1d6f69d577202205e0d9e9c0bfc2993160edad71cd1474b6308d990a89a54"
    "c80d7c62295edd2a394121039999e7c52a1447916b2af30478669c4e6e3ce52b895da7"
    "78f0b46b73f8ea6f00feffffff30be91ac83fee19e06304732027a39f9ec9018c5aae1"
    "159bf1c5de53dea61785fc0200006a473044022057cee17c3e123864336bdd6373e4bc"
    "0bf030ca70dd078520705930a4168610d0022061fdeedfbeb0b89c3b20db220799978b"
    "c94e11e4155b810b8b59df019b3f1859412103e2074e4387eeb3b1dec2fc8b953b0c13"
    "c53d0d3b7b676e1b3ca75ee606ecf750feffffffdd462d60e51be69451f06c36ba4490"
    "aaad8ebf40501dd27341e9c64a5f633324000000006a473044022043511ab874f0037c"
    "5726b1efc69fcdb638fac74ab3f6766eb80947cff8c1175a02200606ccf8db60f56e77"
    "03f6d5b81f5f5141f5b029a7b5a35700907f368b7e0f024121038daab4c77b9a428efb"
    "23aa2ccadc5c5332f299f5e51d1f1600524c0313ab9ec2feffffff04fe66c200000000"
    "001976a914a8c27c62fafec0a07d28b3b905912e9f385a7f1a88ac2a3b560800000000"
    "1976a914c20992e92764ef7e33e2cf6ed538d34b18a1fff888ac00a3e1110000000019"
    "76a9147137cd9dc7aad0d1cbc8e0ec12aae753d1acfaf488ac5d2b0f00000000001976"
    "a914c10084f449e968b0d71ee23a308954c68d8c97e488ac28620700"
]

def test_tx_serialiazation():
    for test in tests:
        test = bytes.fromhex(test)
        deser = tx_lib.Deserializer(test)
        tx = deser.read_tx()
        assert tx.serialize() == test


def test_psbt_parse():
    psbt_hex = (
        '70736274ff0100fd5203020000000a00000000000000000000000000000000000000000000000000000000000000000000000000fdffff'
        'ff00000000000000000000000000000000000000000000000000000000000000000100000000fdffffff00000000000000000000000000'
        '000000000000000000000000000000000000000200000000fdffffff000000000000000000000000000000000000000000000000000000'
        '00000000000300000000fdffffff00000000000000000000000000000000000000000000000000000000000000000400000000fdffffff'
        '00000000000000000000000000000000000000000000000000000000000000000500000000fdffffff0000000000000000000000000000'
        '0000000000000000000000000000000000000600000000fdffffff00000000000000000000000000000000000000000000000000000000'
        '000000000700000000fdffffff00000000000000000000000000000000000000000000000000000000000000000800000000fdffffff00'
        '000000000000000000000000000000000000000000000000000000000000000900000000fdffffff0ae803000000000000220000000000'
        '0000000000000000000000000000000000000000000000000000000000e803000000000000220000000000000000000000000000000000'
        '0000000000000000000000000000000000e803000000000000220000000000000000000000000000000000000000000000000000000000'
        '0000000000e8030000000000002200000000000000000000000000000000000000000000000000000000000000000000e8030000000000'
        '002200000000000000000000000000000000000000000000000000000000000000000000e8030000000000002200000000000000000000'
        '000000000000000000000000000000000000000000000000e8030000000000002200000000000000000000000000000000000000000000'
        '000000000000000000000000e8030000000000002200000000000000000000000000000000000000000000000000000000000000000000'
        'e8030000000000002200000000000000000000000000000000000000000000000000000000000000000000e80300000000000022000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000001012ba0860100000000002251204087680d14'
        '57e09c3c61bc13dee53fbea58a40897bcd4ca570bf0ce73ee655730117204077681f3135d430e104e6ceefe3964ee185af1c2954c572a3'
        'd9d5a2a5c3770d0001012ba0860100000000002251202acc52cb961cbc37b177ee29589b4a873beef7197fb70f25af7248d2e81412b801'
        '1720c801f116f98b460a0403b825568154bae212ebc2d2a50c3d42f2c3f50ae6d2fc0001012ba086010000000000225120fbacb1e96432'
        'b736642b398e6891a9ed3ceb863da5ac13b0968607aa2c7249ef011720250287ce05e05d11249af02ac6d73bc4e7c30b208a63d80eb647'
        '1ff2a5229c260001012ba086010000000000225120145f7ee2f13ea895f7883fed577eb337ebe604cbeffe687b7f1c5de365039cea0117'
        '2063930a18bb8ba330b3587fb23a2d73fe46add1562637702537815e4b55f461be0001012ba0860100000000002251200d2501ec309b7f'
        '3e2ad29539e4fba4a97aa3658c8cd755402dd3b058004265c0011720e79e78ffa34d333d41b48aae731379900b78c81292a470ac27de57'
        'ebb35f340d0001012ba086010000000000225120748b6172785b878ea66ff7a73eac5da0e9238c80dd81bb4ce56aee1b6925d1f7011720'
        'fc42817350c04872dad8ce9c2702ab44f1c6775d4cba58b2d20ffb8d934acabc0001012ba08601000000000022512056564321b5204057'
        '0e47e811bea35ed14e5a253d17e1c5bbeb7d549b644336fb01172043ea15ed238cde139120bfad0bea1fc78c0058e39661d2df7309baac'
        '85dd7dc30001012ba086010000000000225120056025f488307c2e23e70cdfc793fdf721b2b852474c3adeea4cf0cf2d6e838901172028'
        '1c15fb58e1744e42a25d3a8dd0c46b64d63f7185d283d3b48d65e527b10b890001012ba0860100000000002251209592fe43dfdfa29afa'
        'cebb42e9034cf250fcd6c77b59bf35d7970bf436f0de8b0117201b79433658f86d11e37445ceebf4feba6df8d5f42ce4932d3a0b1e1e4c'
        'c5f5be0001012ba086010000000000225120bf3b636c6e2727c374ee2cf87d3c44515c27c5c771c9a81aa6eee938ef6a6f8e0117208e4a'
        '17bed47864479d5259371382debdb949c03185c1ac6603eb4946cd7da3f30000000000000000000000'
    )
    decoded = tx_lib.psbt_hex_to_tx_hex(psbt_hex)
    expected_tx = psbt.PartiallySignedTransaction.from_base64_or_binary(
        bytes.fromhex(psbt_hex),
        validate=False,
    ).unsigned_tx.serialize().hex()
    assert decoded == expected_tx
